msg = 'Err: All these are not dates '
stop(msg)
}
MakeSureDatesAreCorrect_ymd =  function(dateColToTest){
result = try(lubridate::ymd(dateColToTest))
if (class(result) ==  'Date') {
message('Ok: All items are dates: ' )
return(result)
}else {
msg = 'Err: All these are not dates '
stop(msg)
}
# Make sure Result Date is at or after Event Date
IsLaterDateAfterEarlierDate = function (FileToOpen, LaterDate,EarlierDate){
if(sum(LaterDate >= EarlierDate ) == length(rd$`Bet Result Date`)){
message('OK: All Bet Result Dates are on or after Event dates')
}else{
msg='Err: Not all Bet Result Dates are on or after Event dates'
print(data.frame(LaterDate , EarlierDate)[ !(LaterDate >= EarlierDate) ,])
shell.exec(FileToOpen)
stop(msg)
}
# Make sure data to write back is only a data frame
isObjectOnlyDataFrame = function(fileOjbect)
if (is.data.frame(fileOjbect)){
message('OK: data is only a data frame')
TRUE
}else{
msg = 'Err: data is not only a data frame'
stop(msg)
FALSE}
# ---------------
# There must be at least 1 row's worth of data to read
isObjectOnlyDataFrameAndAtLeastOneRowData = function(fileOjbect)
if (is.data.frame(fileOjbect) & nrow(fileOjbect)>0 ){
message("OK: data is only a data frame and hase at least 1 row of data")
TRUE
}else{
stop("Err: data is not only a data frame and doesn't have more than 1 row of data")
FALSE
}
# ---------------
# Rename Columns In a Consistent Way
ConsistantColNames = function(){
as.character(c(
'name_of_wsp'
,'event_date'
,'bet_result_date'
,'venue'
,'race_number'
,'pari_bets_taken'
,'non_pari_bets_taken'
,'bets_paid_credited_to_customers'
,'net_customer_winnings'
,'bets_back'
,'bet_back_rev'
,'other_rev'
,'jackpots_created'
)
}
# Check expected data types
number_of_cols = 16
CorrDataTypes = function(){
CorrectDType=vector(mode = 'logical' , number_of_cols)
CorrectDType[1]  =  is.character(rd$name_of_wsp)
CorrectDType[2]  =  DescTools::IsDate(rd$event_date)
CorrectDType[3]  =  DescTools::IsDate(rd$bet_result_date)
CorrectDType[4]  =  is.character(rd$venue)
CorrectDType[5]  =  is.integer(as.integer(rd$race_number))
CorrectDType[6]  =  is.numeric(rd$pari_bets_taken)
CorrectDType[7]  =  is.numeric(rd$non_pari_bets_taken)
CorrectDType[8]  =  is.numeric(rd$bets_paid_credited_to_customers)
CorrectDType[9]  =  is.numeric(rd$net_customer_winnings)
CorrectDType[10] =  is.numeric(rd$bets_back)
CorrectDType[11] =  is.numeric(rd$bet_back_rev)
CorrectDType[12] =  is.numeric(rd$other_rev)
CorrectDType[13] =  is.numeric(rd$jackpots_created)
CorrectDType[14] =  is.character(rd$file_name)
CorrectDType[15] =  DescTools::IsDate(rd$date_file_processed_grv)
CorrectDType[16] =  is.character(rd$dateTimeStamp_file_processed_grv)
if (sum(CorrectDType) == number_of_cols ) {
message('OK: Column names and data types are correct ')}
else{
# message('Err: Column names and data types not as expected')
ColWithDataTypErr = which(CorrectDType  == FALSE)
message()
msg = paste0("Err: check column: ", ColWithDataTypErr )
stop(msg)
}
# Check TrackNames are consistent
AnyUnknownVenueNames = function(FileToOpen, VenueNames){
knownVenueNames = c(
'Ballarat'
,'Bendigo'
,'Cranbourne'
,'Geelong'
,'Healesville'
,'Horsham'
,'Sale'
,'Sandown Park'
,'Shepparton'
,'The Meadows'
,'Traralgon'
,'Warragul'
,'Warrnambool'
)
if (length(VenueNames[!(VenueNames %in% knownVenueNames  )]) >0 ) {
message('Err: Unkown Venue names')
shell.exec(FileToOpen)
stop(VenueNames[!(VenueNames %in% knownVenueNames  )])
} else {
message('OK: All venue names are ok ')
}
# Known tracks, note there is no discrimintor for MEP and SAP ie the 2 new tracks
# VenueNames[VenueNames == 'Ballarat']      <-	'BAL'
# VenueNames[VenueNames == 'Bendigo']     <-		'BEN'
# VenueNames[VenueNames == 'Cranbourne']  <-		'CRN'
# VenueNames[VenueNames == 'Geelong']     <-		'GEL'
# VenueNames[VenueNames == 'Healesville'] <-		'HVL'
# VenueNames[VenueNames == 'Horsham']     <-		'HOR'
# VenueNames[VenueNames == 'Sale']        <-		'SLE'
# VenueNames[VenueNames == 'Sandown Park'] <-		'SAND'
# VenueNames[VenueNames == 'Shepparton']  <-		'SHP'
# VenueNames[VenueNames == 'The Meadows'] <-		'MEAD'
# VenueNames[VenueNames == 'Traralgon']   <-		'TRA'
# VenueNames[VenueNames == 'Warragul']    <-		'WGL'
# VenueNames[VenueNames == 'Warrnambool'] <-		'WBL'
# VenueNames
insertFileIntoDbase = function (fileOject){
library(RODBC)
if (!(exists('fto')))   fto = odbcConnect("R_WH_Test_SQLNativeClient64Bit",uid="GRMS",pwd="Password1")
rdFinal = fileOject[,c(
'name_of_wsp'
,'event_date'
,'bet_result_date'
,'venue'
,'race_number'
,'pari_bets_taken'
,'non_pari_bets_taken'
,'bets_paid_credited_to_customers'
,'net_customer_winnings'
,'bets_back'
,'bet_back_rev'
,'other_rev'
,'jackpots_created'
,'file_name'
,'date_file_processed_grv'
,'dateTimeStamp_file_processed_grv'
)
]
RODBC::sqlSave(channel = fto
,dat = rdFinal
,tablename = 'tb_daily_wsp_files_staging'
,append = TRUE
,rownames = FALSE
,colnames = FALSE
,verbose = FALSE
,safer = TRUE
,addPK = FALSE
,test = FALSE
)
}
sqlRunAnaySelectAgainstWareHouseTest = function(sql) {
library(RODBC)
if (!(exists('fto')))   fto = odbcConnect("R_WH_Test_SQLNativeClient64Bit",uid="GRMS",pwd="Password1")
RODBC::sqlQuery(channel = fto, query = sql,errors = TRUE)
}
# Read and transfer one file at a time
library(DescTools)
options(scipen = 100) # Ensure non-scientific display of numbers
getFilesFromDir    =  'C:/SPORTSBET daily wagering files/ProcessedAll' #get SportsBet processed files from this dir
moveCleansedToDir  =  'C:/SPORTSBET daily wagering files/ProcessedAll_afterR'                                                #once files have been processed and writtent to warehouse test dbase, move originating file to
# get master list of processed files and sort by alphabetical order
d = dir(path = getFilesFromDir , pattern = '.CSV',ignore.case = TRUE,all.files = FALSE,include.dirs = FALSE)
# d = sort(d)
# Read directory for files and get first file
length(d)  # Total files to process
d[1]       # name of first file to process
# Full file path to examine
fullFilePath = paste0(getFilesFromDir,'/',d[1])
# Make avail functions to test this data
source('WSP_test_functions_v2.R')
# Read directory for files and get first file
rd = fileCanBeRead(getFilesFromDir, d[1])
# Structure of data before any cleanup
str(rd)  #If read file successfully what does the structure look like ?
Expected_NameOfWSP('Sportsbet')   # WSP is consistent in how they identify themselves by name
fNameTest(rd)                     # Is WSP being consistent in using Column names ?
# Write file Name and Date file processed by GRV to data supplied
rd$file_name = d[1]
rd$date_file_processed_grv            = lubridate::ymd(Sys.Date())
rd$dateTimeStamp_file_processed_grv  = as.character(date())
# Make sure all Dates are the correct data type
rd$`Event Date`                        =  MakeSureDatesAreCorrect_dmy(rd$`Event Date`)
rd$`Bet Result Date`                   =  MakeSureDatesAreCorrect_dmy(rd$`Bet Result Date`)
rd$date_file_processed_grv             =  MakeSureDatesAreCorrect_ymd(rd$date_file_processed_grv)
if (is.character(rd$dateTimeStamp_file_processed_grv)){message('OK: dateTimeStamp_file_processed_grv is character')} else{
message('Err: dateTimeStamp_file_processed_grv is not character')}
ignoreBetResultsDateTest = TRUE
if (ignoreBetResultsDateTest == TRUE){
message('Note: am ignoring the BetResults date cf Event date test' )}else{
# Are all BetResults Date after Event Date ?
IsLaterDateAfterEarlierDate(fullFilePath,rd$`Bet Result Date` , rd$`Event Date` )
}
# Check Venue names , note MEP and SAP have predate the Data Spec.
AnyUnknownVenueNames(fullFilePath,rd$Venue)
# Is data object a data frame only, not some structure coerced ?
isObjectOnlyDataFrame(rd)   #Should be *TRUE*
isObjectOnlyDataFrameAndAtLeastOneRowData(rd) # Is there at least one row of data ?
names(rd)[1:13] = ConsistantColNames() # Rename the first 13 columns in a consistent way (last 2 cols are added by this script), ie *file_name* and *rd$date_file_processed_grv*
# coerce to correct data types
rd$pari_bets_taken                  =  as.double(rd$pari_bets_taken)
rd$non_pari_bets_taken              =  as.double(rd$non_pari_bets_taken)
rd$bets_paid_credited_to_customers  =  as.double(rd$bets_paid_credited_to_customers)
rd$net_customer_winnings            =  as.double(rd$net_customer_winnings)
rd$bets_back                        =  as.double(rd$bets_back)
rd$bet_back_rev                     =  as.double(rd$bet_back_rev)
rd$other_rev                        =  as.double(rd$other_rev)
rd$jackpots_created                 =  as.double(rd$jackpots_created)
# Check we've got all the expected data types
CorrDataTypes()
# Check: if Event date, Track, race number are the same update else insert
# Insert data into data base
insertFileIntoDbase(rd)
# if Write to dbase successfull then move csv file
file.rename(
from = paste0(getFilesFromDir, "/", d[1])
,to   = paste0(moveCleansedToDir, "/", d[1])
)
print(sqlRunAnaySelectAgainstWareHouseTest("select count(*) Nrows from tb_daily_wsp_files_staging"))
print(paste0("Remaining Files to read: ", length(d)-1))
# Read and transfer one file at a time
library(DescTools)
options(scipen = 100) # Ensure non-scientific display of numbers
getFilesFromDir    =  'C:/SPORTSBET daily wagering files/ProcessedAll' #get SportsBet processed files from this dir
moveCleansedToDir  =  'C:/SPORTSBET daily wagering files/ProcessedAll_afterR'                                                #once files have been processed and writtent to warehouse test dbase, move originating file to
# get master list of processed files and sort by alphabetical order
d = dir(path = getFilesFromDir , pattern = '.CSV',ignore.case = TRUE,all.files = FALSE,include.dirs = FALSE)
# d = sort(d)
# Read directory for files and get first file
length(d)  # Total files to process
d[1]       # name of first file to process
# Full file path to examine
fullFilePath = paste0(getFilesFromDir,'/',d[1])
# Make avail functions to test this data
source('WSP_test_functions_v2.R')
# Read directory for files and get first file
rd = fileCanBeRead(getFilesFromDir, d[1])
# Structure of data before any cleanup
str(rd)  #If read file successfully what does the structure look like ?
Expected_NameOfWSP('Sportsbet')   # WSP is consistent in how they identify themselves by name
fNameTest(rd)                     # Is WSP being consistent in using Column names ?
# Write file Name and Date file processed by GRV to data supplied
rd$file_name = d[1]
rd$date_file_processed_grv            = lubridate::ymd(Sys.Date())
rd$dateTimeStamp_file_processed_grv  = as.character(date())
# Make sure all Dates are the correct data type
rd$`Event Date`                        =  MakeSureDatesAreCorrect_dmy(rd$`Event Date`)
rd$`Bet Result Date`                   =  MakeSureDatesAreCorrect_dmy(rd$`Bet Result Date`)
rd$date_file_processed_grv             =  MakeSureDatesAreCorrect_ymd(rd$date_file_processed_grv)
if (is.character(rd$dateTimeStamp_file_processed_grv)){message('OK: dateTimeStamp_file_processed_grv is character')} else{
message('Err: dateTimeStamp_file_processed_grv is not character')}
ignoreBetResultsDateTest = TRUE
if (ignoreBetResultsDateTest == TRUE){
message('Note: am ignoring the BetResults date cf Event date test' )}else{
# Are all BetResults Date after Event Date ?
IsLaterDateAfterEarlierDate(fullFilePath,rd$`Bet Result Date` , rd$`Event Date` )
}
# Check Venue names , note MEP and SAP have predate the Data Spec.
AnyUnknownVenueNames(fullFilePath,rd$Venue)
# Is data object a data frame only, not some structure coerced ?
isObjectOnlyDataFrame(rd)   #Should be *TRUE*
isObjectOnlyDataFrameAndAtLeastOneRowData(rd) # Is there at least one row of data ?
names(rd)[1:13] = ConsistantColNames() # Rename the first 13 columns in a consistent way (last 2 cols are added by this script), ie *file_name* and *rd$date_file_processed_grv*
# coerce to correct data types
rd$pari_bets_taken                  =  as.double(rd$pari_bets_taken)
rd$non_pari_bets_taken              =  as.double(rd$non_pari_bets_taken)
rd$bets_paid_credited_to_customers  =  as.double(rd$bets_paid_credited_to_customers)
rd$net_customer_winnings            =  as.double(rd$net_customer_winnings)
rd$bets_back                        =  as.double(rd$bets_back)
rd$bet_back_rev                     =  as.double(rd$bet_back_rev)
rd$other_rev                        =  as.double(rd$other_rev)
rd$jackpots_created                 =  as.double(rd$jackpots_created)
# Check we've got all the expected data types
CorrDataTypes()
# Check: if Event date, Track, race number are the same update else insert
# Insert data into data base
insertFileIntoDbase(rd)
# if Write to dbase successfull then move csv file
file.rename(
from = paste0(getFilesFromDir, "/", d[1])
,to   = paste0(moveCleansedToDir, "/", d[1])
)
print(sqlRunAnaySelectAgainstWareHouseTest("select count(*) Nrows from tb_daily_wsp_files_staging"))
print(paste0("Remaining Files to read: ", length(d)-1))
# Read and transfer one file at a time
library(DescTools)
options(scipen = 100) # Ensure non-scientific display of numbers
getFilesFromDir    =  'C:/SPORTSBET daily wagering files/ProcessedAll' #get SportsBet processed files from this dir
moveCleansedToDir  =  'C:/SPORTSBET daily wagering files/ProcessedAll_afterR'                                                #once files have been processed and writtent to warehouse test dbase, move originating file to
# get master list of processed files and sort by alphabetical order
d = dir(path = getFilesFromDir , pattern = '.CSV',ignore.case = TRUE,all.files = FALSE,include.dirs = FALSE)
# d = sort(d)
# Read directory for files and get first file
length(d)  # Total files to process
d[1]       # name of first file to process
# Full file path to examine
fullFilePath = paste0(getFilesFromDir,'/',d[1])
# Make avail functions to test this data
source('WSP_test_functions_v2.R')
# Read directory for files and get first file
rd = fileCanBeRead(getFilesFromDir, d[1])
# Structure of data before any cleanup
str(rd)  #If read file successfully what does the structure look like ?
Expected_NameOfWSP('Sportsbet')   # WSP is consistent in how they identify themselves by name
fNameTest(rd)                     # Is WSP being consistent in using Column names ?
# Write file Name and Date file processed by GRV to data supplied
rd$file_name = d[1]
rd$date_file_processed_grv            = lubridate::ymd(Sys.Date())
rd$dateTimeStamp_file_processed_grv  = as.character(date())
# Make sure all Dates are the correct data type
rd$`Event Date`                        =  MakeSureDatesAreCorrect_dmy(rd$`Event Date`)
rd$`Bet Result Date`                   =  MakeSureDatesAreCorrect_dmy(rd$`Bet Result Date`)
rd$date_file_processed_grv             =  MakeSureDatesAreCorrect_ymd(rd$date_file_processed_grv)
if (is.character(rd$dateTimeStamp_file_processed_grv)){message('OK: dateTimeStamp_file_processed_grv is character')} else{
message('Err: dateTimeStamp_file_processed_grv is not character')}
ignoreBetResultsDateTest = TRUE
if (ignoreBetResultsDateTest == TRUE){
message('Note: am ignoring the BetResults date cf Event date test' )}else{
# Are all BetResults Date after Event Date ?
IsLaterDateAfterEarlierDate(fullFilePath,rd$`Bet Result Date` , rd$`Event Date` )
}
# Check Venue names , note MEP and SAP have predate the Data Spec.
AnyUnknownVenueNames(fullFilePath,rd$Venue)
# Is data object a data frame only, not some structure coerced ?
isObjectOnlyDataFrame(rd)   #Should be *TRUE*
isObjectOnlyDataFrameAndAtLeastOneRowData(rd) # Is there at least one row of data ?
names(rd)[1:13] = ConsistantColNames() # Rename the first 13 columns in a consistent way (last 2 cols are added by this script), ie *file_name* and *rd$date_file_processed_grv*
# coerce to correct data types
rd$pari_bets_taken                  =  as.double(rd$pari_bets_taken)
rd$non_pari_bets_taken              =  as.double(rd$non_pari_bets_taken)
rd$bets_paid_credited_to_customers  =  as.double(rd$bets_paid_credited_to_customers)
rd$net_customer_winnings            =  as.double(rd$net_customer_winnings)
rd$bets_back                        =  as.double(rd$bets_back)
rd$bet_back_rev                     =  as.double(rd$bet_back_rev)
rd$other_rev                        =  as.double(rd$other_rev)
rd$jackpots_created                 =  as.double(rd$jackpots_created)
# Check we've got all the expected data types
CorrDataTypes()
# Check: if Event date, Track, race number are the same update else insert
# Insert data into data base
insertFileIntoDbase(rd)
# if Write to dbase successfull then move csv file
file.rename(
from = paste0(getFilesFromDir, "/", d[1])
,to   = paste0(moveCleansedToDir, "/", d[1])
)
print(sqlRunAnaySelectAgainstWareHouseTest("select count(*) Nrows from tb_daily_wsp_files_staging"))
print(paste0("Remaining Files to read: ", length(d)-1))
# Read and transfer one file at a time
library(DescTools)
options(scipen = 100) # Ensure non-scientific display of numbers
getFilesFromDir    =  'C:/SPORTSBET daily wagering files/ProcessedAll' #get SportsBet processed files from this dir
moveCleansedToDir  =  'C:/SPORTSBET daily wagering files/ProcessedAll_afterR'                                                #once files have been processed and writtent to warehouse test dbase, move originating file to
# get master list of processed files and sort by alphabetical order
d = dir(path = getFilesFromDir , pattern = '.CSV',ignore.case = TRUE,all.files = FALSE,include.dirs = FALSE)
# d = sort(d)
# Read directory for files and get first file
length(d)  # Total files to process
d[1]       # name of first file to process
# Full file path to examine
fullFilePath = paste0(getFilesFromDir,'/',d[1])
# Make avail functions to test this data
source('WSP_test_functions_v2.R')
# Read directory for files and get first file
rd = fileCanBeRead(getFilesFromDir, d[1])
# Structure of data before any cleanup
str(rd)  #If read file successfully what does the structure look like ?
Expected_NameOfWSP('Sportsbet')   # WSP is consistent in how they identify themselves by name
fNameTest(rd)                     # Is WSP being consistent in using Column names ?
# Write file Name and Date file processed by GRV to data supplied
rd$file_name = d[1]
rd$date_file_processed_grv            = lubridate::ymd(Sys.Date())
rd$dateTimeStamp_file_processed_grv  = as.character(date())
# Make sure all Dates are the correct data type
rd$`Event Date`                        =  MakeSureDatesAreCorrect_dmy(rd$`Event Date`)
rd$`Bet Result Date`                   =  MakeSureDatesAreCorrect_dmy(rd$`Bet Result Date`)
rd$date_file_processed_grv             =  MakeSureDatesAreCorrect_ymd(rd$date_file_processed_grv)
if (is.character(rd$dateTimeStamp_file_processed_grv)){message('OK: dateTimeStamp_file_processed_grv is character')} else{
message('Err: dateTimeStamp_file_processed_grv is not character')}
ignoreBetResultsDateTest = TRUE
if (ignoreBetResultsDateTest == TRUE){
message('Note: am ignoring the BetResults date cf Event date test' )}else{
# Are all BetResults Date after Event Date ?
IsLaterDateAfterEarlierDate(fullFilePath,rd$`Bet Result Date` , rd$`Event Date` )
}
# Check Venue names , note MEP and SAP have predate the Data Spec.
AnyUnknownVenueNames(fullFilePath,rd$Venue)
# Is data object a data frame only, not some structure coerced ?
isObjectOnlyDataFrame(rd)   #Should be *TRUE*
isObjectOnlyDataFrameAndAtLeastOneRowData(rd) # Is there at least one row of data ?
names(rd)[1:13] = ConsistantColNames() # Rename the first 13 columns in a consistent way (last 2 cols are added by this script), ie *file_name* and *rd$date_file_processed_grv*
# coerce to correct data types
rd$pari_bets_taken                  =  as.double(rd$pari_bets_taken)
rd$non_pari_bets_taken              =  as.double(rd$non_pari_bets_taken)
rd$bets_paid_credited_to_customers  =  as.double(rd$bets_paid_credited_to_customers)
rd$net_customer_winnings            =  as.double(rd$net_customer_winnings)
rd$bets_back                        =  as.double(rd$bets_back)
rd$bet_back_rev                     =  as.double(rd$bet_back_rev)
rd$other_rev                        =  as.double(rd$other_rev)
rd$jackpots_created                 =  as.double(rd$jackpots_created)
# Check we've got all the expected data types
CorrDataTypes()
# Check: if Event date, Track, race number are the same update else insert
# Insert data into data base
insertFileIntoDbase(rd)
# if Write to dbase successfull then move csv file
file.rename(
from = paste0(getFilesFromDir, "/", d[1])
,to   = paste0(moveCleansedToDir, "/", d[1])
)
print(sqlRunAnaySelectAgainstWareHouseTest("select count(*) Nrows from tb_daily_wsp_files_staging"))
print(paste0("Remaining Files to read: ", length(d)-1))
library(DescTools)
options(scipen = 100) # Ensure non-scientific display of numbers
getFilesFromDir    =  'C:/SPORTSBET daily wagering files/ProcessedAll' #get SportsBet processed files from this dir
moveCleansedToDir  =  'C:/SPORTSBET daily wagering files/ProcessedAll_afterR'                                                #once files have been processed and writtent to warehouse test dbase, move originating file to
d = dir(path = getFilesFromDir , pattern = '.CSV',ignore.case = TRUE,all.files = FALSE,include.dirs = FALSE)
length(d)  # Total files to process
d[1]       # name of first file to process
fullFilePath = paste0(getFilesFromDir,'/',d[1])
source('WSP_test_functions_v2.R')
rd = fileCanBeRead(getFilesFromDir, d[1])
str(rd)  #If read file successfully what does the structure look like ?
Expected_NameOfWSP('Sportsbet')   # WSP is consistent in how they identify themselves by name
fNameTest(rd)                     # Is WSP being consistent in using Column names ?
# Read and transfer one file at a time
library(DescTools)
options(scipen = 100) # Ensure non-scientific display of numbers
getFilesFromDir    =  'C:/SPORTSBET daily wagering files/ProcessedAll' #get SportsBet processed files from this dir
moveCleansedToDir  =  'C:/SPORTSBET daily wagering files/ProcessedAll_afterR'                                                #once files have been processed and writtent to warehouse test dbase, move originating file to
# get master list of processed files and sort by alphabetical order
d = dir(path = getFilesFromDir , pattern = '.CSV',ignore.case = TRUE,all.files = FALSE,include.dirs = FALSE)
# d = sort(d)
# Read directory for files and get first file
length(d)  # Total files to process
d[1]       # name of first file to process
# Full file path to examine
fullFilePath = paste0(getFilesFromDir,'/',d[1])
# Make avail functions to test this data
source('WSP_test_functions_v2.R')
# Read directory for files and get first file
rd = fileCanBeRead(getFilesFromDir, d[1])
# Structure of data before any cleanup
str(rd)  #If read file successfully what does the structure look like ?
Expected_NameOfWSP('Sportsbet')   # WSP is consistent in how they identify themselves by name
rd
fNameTest(rd)                     # Is WSP being consistent in using Column names ?
str(rd)
names(rd)[1] == 'Name of WSP'
names(rd)[2] == 'Event Date'
names(rd)[3] == 'Bet Result Date'
names(rd)[4] == 'Venue'
names(rd)[5] == 'Race Number'
names(rd)[6] == 'Parimutuel Bets Taken'
names(rd)[7] == 'Non-Parimutuel Bets Taken'
names(rd)[9] == 'Net Customer Winnings'
names(rd)[8] == 'Bets Paid/credited to customers'
names(rd)[10] == 'Bets Back'
names(rd)[11] == 'Bet Back Revenue'
names(rd)[12] == 'Other Revenue'
names(rd)[13] == 'Jackpots Created'
rd
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/RepeatSQL_driver_multiple_times.R')
i = 0
while(i<5) {
print(paste0('Sequence: ', i ))
source('H:\\___My_Folders\\00000 H_Drive Analyses\\227 WSP_detailed_audit\\WSP_detailed_Anal\\test_driver_v2.R')
i = i+1
}
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/RepeatSQL_driver_multiple_times.R')
Expected_NameOfWSP <- function (Expected_NameOfWSP) {
if (unique(toupper(rd$`Name of WSP`)== toupper(Expected_NameOfWSP )){
message('OK: WSP name is consistent')
}else {
msg='Err: WSP name has changed'
message(paste0('WSP Name supplied: ',unique(rd$`Name of WSP`,' Expected_NameOfWSP: ',Expected_NameOfWSP)))
stop(msg)
}
Expected_NameOfWSP <- function (Expected_NameOfWSP) {
if (unique(toupper(rd$`Name of WSP`))== toupper(Expected_NameOfWSP )){
message('OK: WSP name is consistent')
}else {
msg='Err: WSP name has changed'
message(paste0('WSP Name supplied: ',unique(rd$`Name of WSP`,' Expected_NameOfWSP: ',Expected_NameOfWSP)))
stop(msg)
}
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/RepeatSQL_driver_multiple_times.R')
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/001 RepeatSQL_driver_multiple_times.R')
fullFilePath
tt=c('san','pan','tan','can')
tt[]
tt[tt == 'pan']
tt[tt == 'pan'] = 'panter'
tt
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/001 RepeatSQL_driver_multiple_times.R')
VenueNames
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/001 RepeatSQL_driver_multiple_times.R')
VenueNames
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/001 RepeatSQL_driver_multiple_times.R')
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/003 WSP_test_functions_v2.R')
source('H:/___My_Folders/00000 H_Drive Analyses/227 WSP_detailed_audit/WSP_detailed_Anal/001 RepeatSQL_driver_multiple_times.R')
